# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

# Framework linkage setup
linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
else
  # If frameworks are not needed, comment out the use_frameworks! line
  # use_frameworks!
end

# Add Google SignIn and Firebase Auth Pods
pod 'GoogleSignIn', '~> 7.1' 
pod 'Firebase/Auth'
pod 'Firebase', :modular_headers => true
pod 'FirebaseCoreInternal', :modular_headers => true
pod 'GoogleUtilities', :modular_headers => true
pod 'FirebaseCore', :modular_headers => true

# Add Facebook SDK Pods for Facebook Login
pod 'FBSDKCoreKit', '~> 17.0.3'
pod 'FBSDKLoginKit', '~> 17.0.3'
pod 'FBSDKShareKit', '~> 17.0.3'
pod 'RNFS', :path => '../node_modules/react-native-fs'
pod 'rn-fetch-blob', :path => '../node_modules/rn-fetch-blob'
target 'DeepLinkingApp' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'DeepLinkingAppTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # React Native post install for compatibility
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )

    # Fixes for Facebook SDK integration
    installer.pods_project.targets.each do |target|
      if target.name == "FBSDKCoreKit" or target.name == "FBSDKLoginKit" or target.name == "FBSDKShareKit"
        target.build_configurations.each do |config|
          config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
        end
      end
    end
  end
end
